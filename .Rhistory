test
test[1]
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
keywordInName
foundWithKeyword
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
max(gaussImage)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
max(gaussImage)
min(gaussImage)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/TISForAutomation.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
rowSums
str(Peaks)
plot(rowSums, type = "l", col = "navy")
Peaks
?findpeaks
plot(rowSums, type = "l", col = "navy"); points(x = 768, y = 210.6)
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1])
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 3);
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 6);
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 9);
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 9, col = "red");
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 9, col = "red"); abline(v = c(Points[,3], Points[,4])
)
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 9, col = "red"); abline(v = c(Peaks[,3], Peaks[,4])
)
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 9, col = "red"); abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red"); abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
length(Peaks)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks
names(Peaks[]) <- c("PeakY", "PeakX","PeakStart", "PeakEnd")
Peaks
names(Peaks[,1]) <- "PeakY"
Peaks
Peaks[,1] <- "PeakY"
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
plot(rowSums, type = "l", col = "navy"); points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red"); abline(v = c(Peaks[,3], Peaks[,4], 700, 800), lty = 2, col = "green")
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
foundWithKeyword
DigitizationTODO[,2]
DigitizationTODO[2,]
DigitizationTODO[3,]
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
PossiblePeaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
mean(rowSums)
gaussImage[0:100, ] <- mean(gaussImage)
gaussImage[(nrow(gaussImage) - 60):(nrow(gaussImage)),] <- mean(gaussImage)
gaussImage[gaussImage < 0] <- 0
mean(rowSums)
roeSums(gaussImage)
rowSums(gaussImage)
mean(rowSums)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE)
print("Identify Peaks is done!")
plot(rowSums, type = "l", col = "navy")
points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red")
abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
plot(rowSums, type = "l", col = "navy")
points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red")
abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
gaussImage2 <- abs(t( apply(image, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ) ))
rowSums2 <- rowSums(gaussImage2)
mean(rowSums2)
mean(rowSums2)*0.8
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
foundWithKeyword
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
foundWithKeyword
ImageDigitizationDFnx6[121,]
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
ImageDigitizationDFnx6$DigitizedYet[i]
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/Functions.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/TISForAutomation.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
threshold
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
rowSums <- rowSums(image)
image[,1000]
image[,10020]
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
class(image)
class(image) == "array"
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
peaks
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
nrow(gaussImage)-100:nrow(gaussImage)
nrow(gaussImage)
1956-100
(1956-100):1956
(nrow(gaussImage)-100):nrow(gaussImage)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 20, sortstr = FALSE)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 100, sortstr = FALSE)
plot(rowSums, type = "l", col = "navy")
points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red")
abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 200, sortstr = FALSE)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 500, sortstr = FALSE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 20, sortstr = FALSE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 10, sortstr = FALSE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 5, sortstr = FALSE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 2, sortstr = FALSE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 0.04, sortstr = FALSE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE)
rowSums2 <- rowsum(image)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
rowSum2 <- rowsum(image)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 20, sortstr = FALSE)
findpeaks(rowSums, npeaks = 2, threshold = threshold , minpeakdistance = 20, sortstr = FALSE)
findpeaks(rowSums, npeaks = 4, threshold = threshold , minpeakdistance = 20, sortstr = FALSE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
PossiblePeaks
PossiblePeaks$firstPeak[1]
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks
PossiblePeaks
PossiblePeaks$firstPeak[Start]
PossiblePeaks$firstPeak[1]
START_INDEX = 1
END_INDEX = 0
source('~/Magneto2020/Scripts/getImagesForDate.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
coef <- lmod$coefficients
forlm <- data.frame(standard, opinion1_392)
brightnessFirst392 <-
read.csv("~/Magneto2020/DataCSV/pngTODOTesting.csv", header = TRUE, stringsAsFactors = FALSE)
above.8 <- vector()
total <- vector()
standard <- vector()
name <- vector()
path <- vector()
for (i in 1:392){
name[i] <- brightnessFirst291$ImageName[i]
path[i] <- brightnessFirst291$ImagePath[i]
image <- image_import(name[i],path[i])
above.8[i] <- length(which(image >= 0.80))
total[i] <- length(image)
standard[i] <- above.8[i]/total[i]
}
opinion1_392 = c(userOpinion0_1163,userOpinion117_209[117:208], userOpinion209_291,userOpinion292_392[292:392])
opinion1_392<-readRDS("~/Magneto2020/2006261-392opinionsB")
brightnessFirst392 <-
read.csv("~/Magneto2020/DataCSV/pngTODOTesting.csv", header = TRUE, stringsAsFactors = FALSE)
above.8 <- vector()
total <- vector()
standard <- vector()
name <- vector()
path <- vector()
for (i in 1:392){
name[i] <- brightnessFirst291$ImageName[i]
path[i] <- brightnessFirst291$ImagePath[i]
image <- image_import(name[i],path[i])
above.8[i] <- length(which(image >= 0.80))
total[i] <- length(image)
standard[i] <- above.8[i]/total[i]
}
brightnessFirst392 <-
read.csv("~/Magneto2020/DataCSV/pngTODOTesting.csv", header = TRUE, stringsAsFactors = FALSE)
above.8 <- vector()
total <- vector()
standard <- vector()
name <- vector()
path <- vector()
for (i in 1:392){
name[i] <- brightnessFirst392$ImageName[i]
path[i] <- brightnessFirst392$ImagePath[i]
image <- image_import(name[i],path[i])
above.8[i] <- length(which(image >= 0.80))
total[i] <- length(image)
standard[i] <- above.8[i]/total[i]
}
image_import <- function(image,file_loc){
readTIFF(paste0(file_loc,"/",image))
}
brightnessFirst392 <-
read.csv("~/Magneto2020/DataCSV/pngTODOTesting.csv", header = TRUE, stringsAsFactors = FALSE)
above.8 <- vector()
total <- vector()
standard <- vector()
name <- vector()
path <- vector()
for (i in 1:392){
name[i] <- brightnessFirst392$ImageName[i]
path[i] <- brightnessFirst392$ImagePath[i]
image <- image_import(name[i],path[i])
above.8[i] <- length(which(image >= 0.80))
total[i] <- length(image)
standard[i] <- above.8[i]/total[i]
}
xvals = 1:392
Images <- data.frame(standard, opinion1_392)
plot(x = xvals, y = Images$standard, col = Images$opinion1_392, ylim = c(0, 0.2))
legend(x = "bottomright", legend = paste0("image:", c("good", "bright")),
fill = c("black", "red"))
abline(v = 14)
forlm <- data.frame(standard, opinion1_392)
forlm <- forlm[-192,]
lmod <- glm(opinion1_392 ~ standard, data = forlm, family = binomial)
summary(lmod)
plot(lmod, which = 1:6)
nullmodel <- glm(opinion1_392~1, family = binomial,  data = forlm)
1-logLik(lmod)/logLik(nullmodel)
coef <- lmod$coefficients
name <- "AGC--H-19260902-19260904.tif"
path <- "/home/ben/magneto/Images/AGC-H-19260101-19281230/"
image <- image_import(name,path)
abovespec <- length(which(image >= 0.80))
totalspec <- length(image)
standardspec <- abovespec/totalspec
observation <- standardspec
decision <- exp(coef[1] + coef[2] * observation)/(1 + exp(coef[1] + coef[2] * observation))
decision
image <- verticalImageCheck(image)
verticalImageCheck <- function(magnetogram){
ncol_magnetogram <- ncol(magnetogram)
nrow_magnetogram <- nrow(magnetogram)
if (ncol_magnetogram < nrow_magnetogram) {
retVal <- apply(magnetogram,1,rev)
}
else {
retVal <- magnetogram
}
return(retVal)
}
coef <- lmod$coefficients
name <- "AGC--H-19260902-19260904.tif"
path <- "/home/ben/magneto/Images/AGC-H-19260101-19281230/"
image <- image_import(name,path)
abovespec <- length(which(image >= 0.80))
totalspec <- length(image)
standardspec <- abovespec/totalspec
observation <- standardspec
decision <- exp(coef[1] + coef[2] * observation)/(1 + exp(coef[1] + coef[2] * observation))
decision
image <- verticalImageCheck(image)
image2 <- image
source("~/Magneto2020/Scripts/BreakoutOptimization.R")
WithGauss <-  t(apply(image, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ))
#this is the defult for bright false
image2[image2 = NULL] <- 0
image2[image2 < (1 - mean(image2))] <- 0
image2[image2 > 0] <- 1
#this is for bright is true
image[image = NULL] <- 0
image[image < (quantile(image,0.91))] <- 0
image[image > 0] <- 1
#WithGauss2 <-  t(apply(image2, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ))
#this was in there but doesnt do anything from what I can tell..
#WithGauss[0:100, ] <- mean(WithGauss)
#  WithGauss[(nrow(WithGauss) - 60):(nrow(WithGauss)),] <- mean(WithGauss)
# WithGauss[WithGauss < 0] <- 0
#WithGauss2[0:100, ] <- mean(WithGauss2)
#  WithGauss2[(nrow(WithGauss2) - 60):(nrow(WithGauss2)),] <- mean(WithGauss2)
# WithGauss2[WithGauss2 < 0] <- 0
plot(image)
plot(image2)
plot(WithGauss)
#plot(WithGauss2)
library("png")
library("knitr")
library("tiff")
coef <- lmod$coefficients
name <- "AGC--H-19260902-19260904.tif"
path <- "/home/ben/magneto/Images/AGC-H-19260101-19281230/"
image <- image_import(name,path)
abovespec <- length(which(image >= 0.80))
totalspec <- length(image)
standardspec <- abovespec/totalspec
observation <- standardspec
decision <- exp(coef[1] + coef[2] * observation)/(1 + exp(coef[1] + coef[2] * observation))
decision
image <- verticalImageCheck(image)
image2 <- image
source("~/Magneto2020/Scripts/BreakoutOptimization.R")
WithGauss <-  t(apply(image, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ))
#this is the defult for bright false
image2[image2 = NULL] <- 0
image2[image2 < (1 - mean(image2))] <- 0
image2[image2 > 0] <- 1
#this is for bright is true
image[image = NULL] <- 0
image[image < (quantile(image,0.91))] <- 0
image[image > 0] <- 1
#WithGauss2 <-  t(apply(image2, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ))
#this was in there but doesnt do anything from what I can tell..
#WithGauss[0:100, ] <- mean(WithGauss)
#  WithGauss[(nrow(WithGauss) - 60):(nrow(WithGauss)),] <- mean(WithGauss)
# WithGauss[WithGauss < 0] <- 0
#WithGauss2[0:100, ] <- mean(WithGauss2)
#  WithGauss2[(nrow(WithGauss2) - 60):(nrow(WithGauss2)),] <- mean(WithGauss2)
# WithGauss2[WithGauss2 < 0] <- 0
plot(image)
plot(image2)
plot(WithGauss)
#plot(WithGauss2)
plot(image)
library("rtiff")
coef <- lmod$coefficients
name <- "AGC--H-19260902-19260904.tif"
path <- "/home/ben/magneto/Images/AGC-H-19260101-19281230/"
image <- image_import(name,path)
abovespec <- length(which(image >= 0.80))
totalspec <- length(image)
standardspec <- abovespec/totalspec
observation <- standardspec
decision <- exp(coef[1] + coef[2] * observation)/(1 + exp(coef[1] + coef[2] * observation))
decision
image <- verticalImageCheck(image)
image2 <- image
source("~/Magneto2020/Scripts/BreakoutOptimization.R")
WithGauss <-  t(apply(image, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ))
#this is the defult for bright false
image2[image2 = NULL] <- 0
image2[image2 < (1 - mean(image2))] <- 0
image2[image2 > 0] <- 1
#this is for bright is true
image[image = NULL] <- 0
image[image < (quantile(image,0.91))] <- 0
image[image > 0] <- 1
#WithGauss2 <-  t(apply(image2, MARGIN = 1, FUN = deconvGauss, sig = 10, kern.trunc = 0.05, nw = 3 ))
#this was in there but doesnt do anything from what I can tell..
#WithGauss[0:100, ] <- mean(WithGauss)
#  WithGauss[(nrow(WithGauss) - 60):(nrow(WithGauss)),] <- mean(WithGauss)
# WithGauss[WithGauss < 0] <- 0
#WithGauss2[0:100, ] <- mean(WithGauss2)
#  WithGauss2[(nrow(WithGauss2) - 60):(nrow(WithGauss2)),] <- mean(WithGauss2)
# WithGauss2[WithGauss2 < 0] <- 0
plot(image)
plot(image2)
plot(WithGauss)
#plot(WithGauss2)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
foundWithKeyword
Peaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
PossiblePeaks
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
Peaks
threshold
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
saveRDS(rowSums, file = "~/Magneto2020/rowSums19260902")
knitr::opts_chunk$set(echo = TRUE)
rowSums <-readRDS("~/Magneto2020/rowSums19260902")
plot(rowSums)
plot(rowSums, type =  "l")
max(rowSums)
rowSums[max(rowSums)]
dim(rowSums)
str(rowSums)
which(rowSums = max(rowSums))
which(rowSums[] = max(rowSums))
which(rowSums == max(rowSums))
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
boxplot(x = rowSums)
plot(rowSums, type =  "l")
boxplot(x = rowSums)
plot(rowSums, type =  "l", xlim = c(1400,1500), ylim = c(140000, 160000))
boxplot(x = rowSums)
plot(rowSums, type =  "l", xlim = c(1400,1500), ylim = c(140000, 170000))
boxplot(x = rowSums)
plot(rowSums, type =  "l") #, xlim = c(1400,1500), ylim = c(140000, 170000))
boxplot(x = rowSums)
source('~/Magneto2020/Scripts/StartDigitization.R', echo=TRUE)
knitr::opts_chunk$set(echo = TRUE)
plot(rowSums, type =  "l") #, xlim = c(1400,1500), ylim = c(140000, 170000))
threshold <- (0.4*(mean(rowSums)))
fivePercent <- 0.05*max(rowSums)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE, minpeakheight = fivePercent)
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_chunk$set(echo = TRUE)
rowSums <-readRDS("~/Magneto2020/rowSums19260902")
plot(rowSums, type =  "l") #, xlim = c(1400,1500), ylim = c(140000, 170000))
threshold <- (0.4*(mean(rowSums)))
fivePercent <- 0.05*max(rowSums)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE, minpeakheight = fivePercent)
threshold <- (0.4*(mean(rowSums)))
fivePercent <- 0.05*max(rowSums)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE, minpeakheight = fivePercent)
plot(rowSums, type = "l", col = "navy")
points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red")
abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
Peaks
dim(Peaks)
dim(Peaks)[1]
max(Peaks)
which(Peaks = Max(Peaks))
which(Peaks == Max(Peaks))
which(Peaks == max(Peaks))
which(Peaks == min(Peaks))
which(Peaks == max(Peaks[,1]))
which(Peaks == min(Peaks[,1]))
knitr::opts_chunk$set(echo = TRUE)
threshold <- (0.4*(mean(rowSums)))
fivePercent <- 0.05*max(rowSums)
Peaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE, minpeakheight = fivePercent)
plot(rowSums, type = "l", col = "navy")
points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red")
abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
checkingPeaks <- function(pracemaPeaks, rowSums, numPeaksWanted){
library("pracma")
numPeaksFound <- dim(pracemaPeaks)[1]
bounds <- vector()
minHight <- 0.05*max(pracemaPeaks)
if (NumPeaksWanted > numPeaksFound) {
for (i in 1:numPeaksFound) {
bounds <- c(bounds,pracemaPeaks[i,3]:pracemaPeaks[i,4])
}
rowSumsWOPeaks <- rowSums[-bounds]
threshold <- (0.4*(mean(rowSumsWOPeaks)))
extraPeaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold ,
sortstr = FALSE, minpeakheight = minHight)
if (is.null(extraPeaks)) {
return("Couldn't find anymore peaks")
}
if (numPeaksWanted == numPeaksFound + 1) {
extraPeak <- which(Peaks == max(Peaks[,1]))
return(extraPeaks[extraPeak,])
}
#TODO figure out how to make this recursive.. don't nessasarly know how many they wanted..( or even if that should be a parameter)
}
else{
}
}
library("pracma")
numPeaksFound <- dim(pracemaPeaks)[1]
pracemaPeaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE, minpeakheight = fivePercent)
numPeaksFound <- dim(pracemaPeaks)[1]
bounds <- vector()
minHight <- 0.05*max(pracemaPeaks)
numPeaksWanted <- 4
numPeaksFound
rowSums <-readRDS("~/Magneto2020/BrightnessTesting/rowSums19260902")
rowSums <-readRDS("~/Magneto2020/rowSums19260902")
rowSums <-readRDS("~/Magneto2020/rowSums19260902")
write.csv(rowSums, file = "~/Magneto2020/rowSums19260902.csv")
knitr::opts_chunk$set(echo = TRUE)
threshold <- (0.4*(mean(rowSums)))
fivePercent <- 0.05*max(rowSums)
pracemaPeaks <- findpeaks(rowSums, npeaks = 4, threshold = threshold , sortstr = FALSE, minpeakheight = fivePercent)
pracemaPeaks
plot(rowSums, type = "l", col = "navy")
points(x = Peaks[,2], y = Peaks[,1], pch = 20, col = "red")
abline(v = c(Peaks[,3], Peaks[,4]), lty = 2, col = "green")
reticulate::repl_python()
reticulate::repl_python()
knitr::opts_chunk$set(echo = TRUE)
library("reticuate")
library(reticulate)
library(reticulate)
source_python("~/Magneto2020/Scripts/findPeaks.py")
source_python("~/Magneto2020/Scripts/findPeaks.py")
source_python("~/Magneto2020/Scripts/findPeaks.py")
source_python("~/Magneto2020/Scripts/findPeaks.py")
pip --version
scipy <- import("scipy")
scipy <- import("os")
scipy <- import("scipy")
conda_install("r-reticulate", "scipy")
#conda_install("r-reticulate", "scipy")
source_python("~/Magneto2020/Scripts/findPeaks.py")
#conda_install("r-reticulate", "scipy")
source_python("~/Magneto2020/Scripts/findPeaks.py")
peaks <- FindingPeaks(rowSums, fivePercent)
reticulate::repl_python()
