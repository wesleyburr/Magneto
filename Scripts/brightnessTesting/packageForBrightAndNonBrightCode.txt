#' Non bright image scaling with gaussian deconvolution
#'
#' @param imageMatrix An imported image, can be imported with tiff_import()
#' @param sig Significance parameter, used in dnorm as the final quantile
#' @param kern.trunc Truncated value for the kernel
#' @param nw A positive double-precision number, the time-bandwidth parameter
#'
#' @return Gaussian matrix scaled for bright
.not_bright_image <- function(imageMatrix, sig = 10, kern.trunc = 0.05, nw = 3){
  if (length(imageMatrix) < 20) {
    return(stop("the imageMatrix must be larger then 20 to run gaussian decon"))
  }
  browser()
  gaussimageMatrix <- abs(t( apply(imageMatrix, MARGIN = 1, FUN = deconv_gauss, sig = 10, kern.trunc = 0.05, nw = 3 ) ))

  imageMatrix[imageMatrix = NULL] <- 0
  imageMatrix[imageMatrix < (1 - mean(imageMatrix,na.rm = TRUE))] <- 0
  imageMatrix[imageMatrix > 0] <- 1

  gaussimageMatrix[0:floor((1/62)*nrow(imageMatrix))] <- mean(gaussimageMatrix)
  gaussimageMatrix[(nrow(gaussimageMatrix) - 60):(nrow(gaussimageMatrix)),] <- mean(gaussimageMatrix)
  gaussimageMatrix[gaussimageMatrix < 0] <- 0

  return(gaussimageMatrix)
}



#' Bright image scaling to gaussian
#'
#' @param imageMatrix An imported image, can be imported with tiff_import()
#' @param sig Significance parameter, used in dnorm as the final quantile
#' @param kern.trunc Truncated value for the kernel
#' @param nw A positive double-precision number, the time-bandwidth parameter
#'
#' @return Gaussian matrix scaled for bright
.for_bright_image <- function(imageMatrix, sig = 10, kern.trunc = 0.05, nw = 3){
  if (length(imageMatrix) < 20) {
    return(stop("the imageMatrix must be larger then 20 to run gaussian decon"))
  }
  imageMatrix[imageMatrix = NULL] <- 0
  imageMatrix[imageMatrix < (quantile(imageMatrix,0.95))] <- 0
  imageMatrix[imageMatrix > 0] <- 1
  gaussimageMatrix <-  t(apply(imageMatrix, MARGIN = 1, FUN = deconv_gauss, sig = 10, kern.trunc = 0.05, nw = 3 ))

  gaussimageMatrix[0:100, ] <- mean(gaussimageMatrix)
  gaussimageMatrix[(nrow(gaussimageMatrix) - 60):nrow(gaussimageMatrix),] <- mean(gaussimageMatrix)
  gaussimageMatrix[gaussimageMatrix < 0] <- 0

  return(gaussimageMatrix)
}





TESTING

context(desc = ".not_bright_image")
test_that("Returns the correct gaussian matrix", {
  imageMat <- readRDS("~/magneto/tests/testData/tiffimport1861.RDS")
  expected <- readRDS()
})



context(desc = ".for_bright_image")
test_that("Returns the correct gaussian matrix",{

})
